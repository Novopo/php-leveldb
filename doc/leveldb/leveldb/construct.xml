<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="leveldb.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<refnamediv>
		<refname>LevelDB::__construct</refname>
		<refpurpose>Construct a new LevelDb object</refpurpose>
	</refnamediv>
	
	<refsect1 role="description">
		&reftitle.description;
		<methodsynopsis>
			<modifier>public</modifier> <methodname>LevelDB::__construct</methodname>
			<methodparam><type>string</type><parameter>name</parameter></methodparam>
			<methodparam choice="opt"><type>string</type><parameter>options</parameter></methodparam>
			<methodparam choice="opt"><type>string</type><parameter>read_options</parameter></methodparam>
			<methodparam choice="opt"><type>string</type><parameter>write_options</parameter></methodparam>
		</methodsynopsis>
		<para>
			Instantiates a LevelDB object and opens the give database.

			
		</para>
	</refsect1>
	
	<refsect1 role="parameters">
		&reftitle.parameters;
		<variablelist>
			<varlistentry>
				<term><parameter>name</parameter></term>
				<listitem>
					<para>
						The name parameter corresponds to a file system directory.
						All of the contents of database are stored in this directory.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>options</parameter></term>
				<listitem>
					<para>
						The open options. Default:
						<programlisting role="php">
<![CDATA[
<?php
/* default open options */
$options = array(
	'create_if_missing' => true,    // if the specified database didn't exist will create a new one
	'error_if_exists'   => false,   // if the opened database exsits will throw exception
	'paranoid_checks'   => false,
	'block_cache_size'  => 8 * (2 << 20),
	'write_buffer_size' => 4<<20,
	'block_size'        => 4096,
	'max_open_files'    => 1000,
	'block_restart_interval' => 16,
	'compression'       => LEVELDB_SNAPPY_COMPRESSION,
	'comparator'        => NULL,   // any callable parameter return 0, -1, 1
);


?>
]]>
						</programlisting>

			If you create a database with custom comparator, you can only open it again with the same comparator.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>read_options</parameter></term>
				<listitem>
					<para>

						The read options. Default:
						<programlisting role="php">
							<![CDATA[
							<?php
/* default read options */
$readoptions = array(
	'verify_check_sum'  => false,
	'fill_cache'        => true,
);

?>
							]]>

						</programlisting>
						read_options['verify_checksums'] may be set to true to force checksum verification of all data that is read from the file system on behalf of a particular read. By default, no such verification is done.
						When preforming a bulk read, the application mya be set the read_options['fill_cache'] to false to disable the caching so that the data processed by the bulk read does not end up displacing most of the cached contents. 
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>write_options</parameter></term>
				<listitem>
					<para>
						The write options. Default:
						<programlisting role="php">
							<![CDATA[
<?php

/* default write options */
$writeoptions = array(
	'sync' => false
);

?>
							]]>

						</programlisting>
						Only one element nameed sync in the write option array.  By default, each write to leveldb is asynchronous.	

					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	
	<refsect1 role="returnvalues">
		&reftitle.returnvalues;
		<para>
			

		</para>
	</refsect1>

	<refsect1 role="examples">
		&reftitle.examples;
		<example>
			<title><function>LevelDB::__construct</function> example</title>
			<programlisting role="php">
				<![CDATA[
				<?php
				$db = new LevelDB("/path/to/db", array('comparator' => 'cmp'));
				function cmp($a, $b) {
				    return strcmp($a, $b);
				}
				?>
				]]>
			</programlisting>
			&example.outputs.similar;
			<screen>
				<![CDATA[
				...
				]]>
			</screen>
		</example>
	</refsect1>
	
	
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
